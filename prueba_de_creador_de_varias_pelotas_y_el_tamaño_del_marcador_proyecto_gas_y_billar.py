# -*- coding: utf-8 -*-
"""Prueba_de_creador_de_varias_pelotas_y_el_tama침o_del_marcador_Proyecto_gas_y_billar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AsoEpsL1APfX14r8kQIhdreG3INMBOg1

Librerias y constantes
"""

from matplotlib import pyplot as plt
import numpy as np
from matplotlib.animation import FuncAnimation
import matplotlib.animation as animation
import scipy as sci
!apt install ffmpeg

dt=0.01 #si es 0.01 la velocidad de las pelotas ser치n mucho m치s lentas
Nsteps=4000
N=16 #numero de pelotas
kHertz=1.0e4
#Constantes del algoritmo de integraci칩n
xi =0.1786178958448091
Lambda = -0.2123418310626054
Chi = -0.06626458266981849
Um2labdau2 = (1-2*Lambda)/2
Um2chiplusxi = 1-2*(Chi+xi)

"""Clase Cuerpo"""

class Cuerpo:
  def __init__(self, x0, y0, Vx0, Vy0, m0, R0):
    self.m=m0
    self.R=R0
    self.r=np.array([x0,y0])
    self.V=np.array([Vx0,Vy0])
    self.F=np.zeros(2)

  def BorreFuerza(self):
    self.F=np.zeros(2)

  def SumeFuerza(self,dF):
    self.F=self.F+dF

  def Mueva_r(self, dt, coeficiente):
    self.r=self.r+(coeficiente*dt)*self.V

  def Mueva_V(self, dt, coeficiente):
    self.V=self.V+(coeficiente*dt)*self.F/self.m

"""Colisionador"""

class Colisionador:

  def __init__(self,N):
    self.N=N

  def CalcularFuerzasEntrePelotas(self,P1,P2):
    self.r21=np.array([0,0])
    self.r21=P2.r-P1.r
    self.d=np.linalg.norm(self.r21)
    self.s=(P1.R+P2.R)-self.d
    if self.s>0:
      self.n=np.array([0,0])
      self.n=self.r21*(1.0/self.d)

      self.F2=np.array([0,0])
      self.F2=self.n*(kHertz*(self.s**1.5))

      P2.SumeFuerza(self.F2)
      P1.SumeFuerza(-self.F2)

  def CalcularTodasLasFuerzas(self,Pelota):
    i=0
    for i in range(N):
      Pelota[i].BorreFuerza()
    i=0
    for i in range(0,N):
      for j in range(0,N):
        if i!=j:
          self.CalcularFuerzasEntrePelotas(Pelota[i], Pelota[j])

"""Programa principal"""

radio_pelota=0.17

Pelota1=Cuerpo(-5,0,4.0,0,1.0,radio_pelota)

Pelota2=Cuerpo(0,0,0,0,1.0,radio_pelota)
Pelota3=Cuerpo(0.5,0.19,0,0,1.0,radio_pelota)
Pelota4=Cuerpo(0.5,-0.19,0,0,1.0,radio_pelota)
Pelota5=Cuerpo(1.0,0.35,0,0,1.0,radio_pelota)
Pelota6=Cuerpo(1.0,0,0,0,1.0,radio_pelota)
Pelota7=Cuerpo(1.0,-0.35,0,0,1.0,radio_pelota)
Pelota8=Cuerpo(1.5,0.6,0,0,1.0,radio_pelota)
Pelota9=Cuerpo(1.5,0.22,0,0,1.0,radio_pelota)
Pelota10=Cuerpo(1.5,-0.22,0,0,1.0,radio_pelota)
Pelota11=Cuerpo(1.5,-0.6,0,0,1.0,radio_pelota)
Pelota12=Cuerpo(2.0,0.8,0,0,1.0,radio_pelota)
Pelota13=Cuerpo(2.0,0.4,0,0,1.0,radio_pelota)
Pelota14=Cuerpo(2.0,0,0,0,1.0,radio_pelota)
Pelota15=Cuerpo(2.0,-0.4,0,0,1.0,radio_pelota)
Pelota16=Cuerpo(2.0,-0.8,0,0,1.0,radio_pelota)


Pelotas=[Pelota1, Pelota2, Pelota3, Pelota4, Pelota5, Pelota6, Pelota7, Pelota8, Pelota9, Pelota10, Pelota11, Pelota12, Pelota13, Pelota14, Pelota15, Pelota16]

choque=Colisionador(N)
"""
#Generador de pelotas para simulacion de gas

k=0
for k in range(0,N):
  p=Cuerpo(-9.5,4.5,0.5,0.5,1.0,radio_pelota)

  a=4.5
  while a <=5 and a>=-5:
    b=-9.5
    Lx=10
    for b in range(Lx):
      p.r[0]=p.r[0]+1

    p.r[1]=p.r[1]-1
    a-=1
    Pelotas.append(p)
    print(p)
    print(len(Pelotas))
"""
xdata=np.zeros(Nsteps)
ydata=np.zeros(Nsteps)

x2data=np.zeros(Nsteps)
y2data=np.zeros(Nsteps)

x3data=np.zeros(Nsteps)
y3data=np.zeros(Nsteps)

x4data=np.zeros(Nsteps)
y4data=np.zeros(Nsteps)

x5data=np.zeros(Nsteps)
y5data=np.zeros(Nsteps)

x6data=np.zeros(Nsteps)
y6data=np.zeros(Nsteps)

x7data=np.zeros(Nsteps)
y7data=np.zeros(Nsteps)

x8data=np.zeros(Nsteps)
y8data=np.zeros(Nsteps)

x9data=np.zeros(Nsteps)
y9data=np.zeros(Nsteps)

x10data=np.zeros(Nsteps)
y10data=np.zeros(Nsteps)

x11data=np.zeros(Nsteps)
y11data=np.zeros(Nsteps)

x12data=np.zeros(Nsteps)
y12data=np.zeros(Nsteps)

x13data=np.zeros(Nsteps)
y13data=np.zeros(Nsteps)

x14data=np.zeros(Nsteps)
y14data=np.zeros(Nsteps)

x15data=np.zeros(Nsteps)
y15data=np.zeros(Nsteps)

x16data=np.zeros(Nsteps)
y16data=np.zeros(Nsteps)

t=0

for t in range(0,Nsteps):
#x=x+xi*dx*v
  for i in range(0,N):
    Pelotas[i].Mueva_r(dt, xi)
#v=v+(1-2*Lambda)*dx*F/2
  choque.CalcularTodasLasFuerzas(Pelotas)
  for i in range(0,N):
    Pelotas[i].Mueva_V(dt, Um2labdau2)
#x=x+Chi*dx*v
  for i in range(0,N):
    Pelotas[i].Mueva_r(dt, Chi)
#v=v+Lambda*dx*F

  choque.CalcularTodasLasFuerzas(Pelotas)
  for i in range(0,N):
    Pelotas[i].Mueva_V(dt, Lambda)
#x=x+(1-2(Chi+xi))*dt*v
  for i in range(0,N):
    Pelotas[i].Mueva_r(dt, Um2chiplusxi)
#v=v+Lambda*dx*F
  choque.CalcularTodasLasFuerzas(Pelotas)
  for i in range(0,N):
    Pelotas[i].Mueva_V(dt, Lambda)
#x=x+Chi*dx*v
  for i in range(0,N):
    Pelotas[i].Mueva_r(dt, Chi)
#v=v+(1-2*Lambda)*dx*F/2
  choque.CalcularTodasLasFuerzas(Pelotas)
  for i in range(0,N):
    Pelotas[i].Mueva_V(dt, Um2labdau2)
#x=x+xi*dx*v
  for i in range(0,N):
    Pelotas[i].Mueva_r(dt, xi)

#Para guardar los datos y su animacion junto con el choque con las paredes
  xdata[t]=Pelotas[0].r[0]
  ydata[t]=Pelotas[0].r[1]
  x2data[t]=Pelotas[1].r[0]
  y2data[t]=Pelotas[1].r[1]
  x3data[t]=Pelotas[2].r[0]
  y3data[t]=Pelotas[2].r[1]
  x4data[t]=Pelotas[3].r[0]
  y4data[t]=Pelotas[3].r[1]
  x5data[t]=Pelotas[4].r[0]
  y5data[t]=Pelotas[4].r[1]
  x6data[t]=Pelotas[5].r[0]
  y6data[t]=Pelotas[5].r[1]
  x7data[t]=Pelotas[6].r[0]
  y7data[t]=Pelotas[6].r[1]
  x8data[t]=Pelotas[7].r[0]
  y8data[t]=Pelotas[7].r[1]
  x9data[t]=Pelotas[8].r[0]
  y9data[t]=Pelotas[8].r[1]
  x10data[t]=Pelotas[9].r[0]
  y10data[t]=Pelotas[9].r[1]
  x11data[t]=Pelotas[10].r[0]
  y11data[t]=Pelotas[10].r[1]
  x12data[t]=Pelotas[11].r[0]
  y12data[t]=Pelotas[11].r[1]
  x13data[t]=Pelotas[12].r[0]
  y13data[t]=Pelotas[12].r[1]
  x14data[t]=Pelotas[13].r[0]
  y14data[t]=Pelotas[13].r[1]
  x15data[t]=Pelotas[14].r[0]
  y15data[t]=Pelotas[14].r[1]
  x16data[t]=Pelotas[15].r[0]
  y16data[t]=Pelotas[15].r[1]

  for i in range(0,N):
    if Pelotas[i].r[0]<=-10 or Pelotas[i].r[0]>=10:
      Pelotas[i].V[0]=-Pelotas[i].V[0]
    if Pelotas[i].r[1]<=-5 or Pelotas[i].r[1]>=5:
      Pelotas[i].V[1]=-Pelotas[i].V[1]

"""Animar y graficar

"""

# initializing a figure in
# which the graph will be plotted
fig = plt.figure()
# marking the x-axis and y-axis
axis = plt.axes(xlim =(-10, 10), ylim =(-5, 5))

line, = axis.plot([], [],color= 'purple',marker='o', linestyle='dashed',linewidth=2)
line2, = axis.plot([], [], color='lightgreen', marker='o', linestyle='dashed',linewidth=2)
line3, = axis.plot([], [], color='b', marker='o', linestyle='dashed',linewidth=2)
line4, = axis.plot([], [], color='g', marker='o', linestyle='dashed',linewidth=2)
line5, = axis.plot([], [], color='y', marker='o', linestyle='dashed',linewidth=2)
line6, = axis.plot([], [], color='c', marker='o', linestyle='dashed',linewidth=2)
line7, = axis.plot([], [], color='m', marker='o', linestyle='dashed',linewidth=2)
line8, = axis.plot([], [], color='k', marker='o', linestyle='dashed',linewidth=2)
line9, = axis.plot([], [], color='orange', marker='o', linestyle='dashed',linewidth=2)
line10, = axis.plot([], [], color='cyan', marker='o', linestyle='dashed',linewidth=2)
line11, = axis.plot([], [], color='brown', marker='o', linestyle='dashed',linewidth=2)
line12, = axis.plot([], [], color='olive', marker='o', linestyle='dashed',linewidth=2)
line13, = axis.plot([], [], color='navy', marker='o', linestyle='dashed',linewidth=2)
line14, = axis.plot([], [], color='darkred', marker='o', linestyle='dashed',linewidth=2)
line15, = axis.plot([], [], color='coral', marker='o', linestyle='dashed',linewidth=2)
line16, = axis.plot([], [], color='beige', marker='o', linestyle='dashed',linewidth=2)
def init():
  line.set_data([], [])
  return line,

i=0
def animate(i):
  x=xdata[i]
  y=ydata[i]

  x2=x2data[i]
  y2=y2data[i]

  x3=x3data[i]
  y3=y3data[i]

  x4=x4data[i]
  y4=y4data[i]

  x5=x5data[i]
  y5=y5data[i]

  x6=x6data[i]
  y6=y6data[i]

  x7=x7data[i]
  y7=y7data[i]

  x8=x8data[i]
  y8=y8data[i]

  x9=x9data[i]
  y9=y9data[i]

  x10=x10data[i]
  y10=y10data[i]

  x11=x11data[i]
  y11=y11data[i]

  x12=x12data[i]
  y12=y12data[i]

  x13=x13data[i]
  y13=y13data[i]

  x14=x14data[i]
  y14=y14data[i]

  x15=x15data[i]
  y15=y15data[i]

  x16=x16data[i]
  y16=y16data[i]

  line.set_data(x, y)
  line2.set_data(x2,y2)
  line3.set_data(x3,y3)
  line4.set_data(x4,y4)
  line5.set_data(x5,y5)
  line6.set_data(x6,y6)
  line7.set_data(x7,y7)
  line8.set_data(x8,y8)
  line9.set_data(x9,y9)
  line10.set_data(x10,y10)
  line11.set_data(x11,y11)
  line12.set_data(x12,y12)
  line13.set_data(x13,y13)
  line14.set_data(x14,y14)
  line15.set_data(x15,y15)
  line16.set_data(x16,y16)
  return (line, line2, line3, line4, line5, line6, line7, line8, line9, line10, line11, line12, line13, line14, line15, line16,)

#plt.plot(xdata, ydata,'b',x2data, y2data, 'r')
#plt.show

anim=animation.FuncAnimation(fig, animate, init_func=init, frames=Nsteps, interval=20, blit=True)
anim.save('choque de 16 pelotas (PEFRL) .mp4', fps=30)